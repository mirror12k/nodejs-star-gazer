#!/usr/bin/env node

var fs = require('fs');

var yaml = require('js-yaml');



function StarGazer() {
	this.config_file = 'star-gazer-credentials.yaml';
	this.server_types = {};
	this.plugins = {};
}

StarGazer.prototype.load_plugins = function() {
	var plugin_directories = fs.readdirSync('./plugins');
	for (var i = 0; i < plugin_directories.length; i++) {
		var plugin_name = plugin_directories[i];
		console.log('loading plugin ', plugin_name);
		var plugin = require('./plugins/' + plugin_name + '/' + plugin_name);
		this.plugins[plugin_name] = plugin;
	}

	for (var plugin_name in this.plugins) {
		this.plugins[plugin_name].initialize(this);
	}
};

StarGazer.prototype.register_server_type = function(server_type, server_class) {
	this.server_types[server_type] = server_class;
};

StarGazer.prototype.load_config = function(filepath) {
	// defaults to using .config_file as the filepath
	if (filepath === undefined)
		filepath = this.config_file;
	
	// load the config file
	var config_data;
	if (fs.existsSync(filepath)) {
		config_data = yaml.safeLoad(fs.readFileSync(filepath, 'utf8'));
	} else {
		console.log("warning: no config file found at '" + filepath + "'");
		config_data = { credentials: {} };
	}

	// instantiate all credentials classes
	this.config = { credentials: {} };
	for (var server_name in config_data.credentials) {
		var data = config_data.credentials[server_name];
		this.config.credentials[server_name] = this.server_types[data.server_type].from_store(server_name, data);
	}
};

StarGazer.prototype.store_config = function(filepath) {
	// defaults to using .config_file as the filepath
	if (filepath === undefined)
		filepath = this.config_file;

	// serialize all the credentials back into a js object
	var config_data = { credentials: {} };
	for (var server_name in this.config.credentials) {
		config_data.credentials[server_name] = this.config.credentials[server_name].to_store();
	}

	// write the config file
	fs.writeFileSync(filepath, yaml.safeDump(config_data), { 'encoding': 'utf8' });
};






StarGazer.prototype.list_credentials = function () {
	if (Object.keys(this.config.credentials).length === 0) {
		console.log("no credentials in store!");
	} else {
		console.log("listed credentials:");
		for (var server_name in this.config.credentials) {
			var credentials = this.config.credentials[server_name];
			console.log(server_name + " [" + credentials.server_type + "]");
			credentials.print_info();
		}
	}
};


StarGazer.prototype.get_credentials = function (server_name) {
	return this.config.credentials[server_name];
};

StarGazer.prototype.open_connection = function (server_name) {
	var credentials = this.get_credentials(server_name);
	if (credentials !== undefined) {
		console.log('connecting to ' + server_name + '...');
		credentials.open_connection();
	} else {
		console.error("error: no credentials found for '" + server_name + "', use the list command to view your existing credentials");
	}
}

StarGazer.prototype.add_credentials = function (server_name, credentials) {
	if (this.get_credentials(server_name) !== undefined) {
		console.error("error: a set of credentials already exists under the name '" + server_name + "', use a different server name");
		return false;
	}

	this.config.credentials[server_name] = credentials;
	return true;
}

StarGazer.prototype.remove_credentials = function (server_name) {
	if (this.get_credentials(server_name) === undefined) {
		console.error("error: no credentials found for '" + server_name + "', use the list command to view your existing credentials");
		return false;
	}

	delete this.config.credentials[server_name];
	return true;
}



var gazer = new StarGazer();
gazer.load_plugins();
gazer.load_config();


if (process.argv.length < 3) {
	console.log('usage:\n\
		star-gazer init\n\
		star-gazer list\n\
		star-gazer connect <server-name>\n\
		star-gazer add <server-type> <server-name> [opt=val ...]\n\
		star-gazer remove <server-name>\n');
} else {
	var command = process.argv[2];
	if (command === 'init') {
		gazer.store_config();
		console.log("initialized a " + config_file + " file");

	} else if (command === 'list') {
		gazer.list_credentials();

	} else if (command === 'connect') {
		gazer.open_connection(process.argv[3]);

	} else if (command === 'add') {
		var server_type = process.argv[3];
		var server_name = process.argv[4];

		var credentials = { server_type: server_type };
		for (var i = 5; i < process.argv.length; i++) {
			var arg = process.argv[i];
			var key_value = arg.split("=", 2);
			if (key_value[1] === undefined)
				key_value[1] = true;
			credentials[key_value[0]] = key_value[1];
		}
		console.log("got credentials: %j", credentials);
		
		if (gazer.server_types[server_type] !== undefined) {
			var credentials_object = gazer.server_types[server_type].create_new(server_name, credentials);
			gazer.add_credentials(server_name, credentials_object);
			gazer.store_config();
			console.log('wrote new credentials to store');
		} else {
			console.error("error: no such server type registered '" + server_type + "'");
		}

	} else if (command === 'remove') {
		gazer.remove_credentials(process.argv[3]);
		gazer.store_config();
		console.log('deleted credentials from store');

	} else {
		console.log("unknown command: " + command);
	}
}


