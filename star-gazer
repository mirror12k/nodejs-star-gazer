#!/usr/bin/env node

var fs = require('fs');
var crypto = require('crypto');

var yaml = require('js-yaml');
var read = require('read');



function StarGazer() {
	this.config_file = 'star-gazer-credentials.yaml';
	this.encrypted_config_file = 'star-gazer-credentials.yaml.aes';
	this.config_encryption_algorithm = 'aes-256-ctr';

	this.is_config_encrypted = undefined;
	this.config_password = undefined;

	this.plugins = {};
	this.server_types = {};
	this.commands = {};

	this.register_command('list', [], this.list_credentials.bind(this));
	this.register_command('connect', ['server name'], this.open_connection.bind(this));
	this.register_command('add', ['server type', 'server name'], this.command_add_credentials.bind(this));
	this.register_command('remove', ['server name'], this.command_remove_credentials.bind(this));
	this.register_command('encrypt-config', [], this.command_encrypt_config.bind(this));
	this.register_command('decrypt-config', [], this.command_decrypt_config.bind(this));
}

StarGazer.prototype.load_plugins = function() {
	var plugin_directories = fs.readdirSync('./plugins');
	for (var i = 0; i < plugin_directories.length; i++) {
		var plugin_name = plugin_directories[i];
		console.log('loading plugin', plugin_name);
		var plugin = require('./plugins/' + plugin_name + '/' + plugin_name);
		this.plugins[plugin_name] = plugin;
	}

	for (var plugin_name in this.plugins) {
		this.plugins[plugin_name].initialize(this);
	}
};

StarGazer.prototype.register_server_type = function(server_type, server_class) {
	this.server_types[server_type] = server_class;
};

StarGazer.prototype.register_command = function(command_name, arguments, callback) {
	this.commands[command_name] = { arguments: arguments, callback: callback };
};

StarGazer.prototype.parse_opts = function(opts) {
	var parsed_opts = {};
	for (var i = 0; i < opts.length; i++) {
		var key_value = opts[i].split("=", 2);
		if (key_value[1] === undefined)
			key_value[1] = true;
		parsed_opts[key_value[0]] = key_value[1];
	}

	return parsed_opts;
};

StarGazer.prototype.list_commands = function() {
	for (var command in this.commands) {
		var description = command;
		for (var i = 0; i < this.commands[command].arguments.length; i++) {
			description += " <" + this.commands[command].arguments[i] + ">";
		}
		description += " [opt=value ...]";
		console.log("\t\t" + description);
	}
};

StarGazer.prototype.run_command = function(command, args) {
	if (this.commands[command] !== undefined) {
		var arg_count = this.commands[command].arguments.length;
		var command_args = args.slice(0, arg_count);
		var opts = this.parse_opts(args.slice(arg_count));
		command_args[arg_count] = opts;

		this.commands[command].callback.apply(undefined, command_args);
	} else {
		console.error("error: unknown command " + command);
	}
};




StarGazer.prototype.list_credentials = function () {
	if (Object.keys(this.config.credentials).length === 0) {
		console.log("no credentials in store!");
	} else {
		console.log("listed credentials:");
		for (var server_name in this.config.credentials) {
			var credentials = this.config.credentials[server_name];
			console.log(server_name + " [" + credentials.server_type + "]");
			credentials.print_info();
		}
	}
};

StarGazer.prototype.command_add_credentials = function (server_type, server_name, opts) {
	// console.log("got credentials: %j", opts);
	if (gazer.server_types[server_type] !== undefined) {
		opts.server_type = server_type;
		var credentials = gazer.server_types[server_type].create_new(server_name, opts);

		if (credentials !== undefined && gazer.add_credentials(server_name, credentials)) {
			gazer.store_config();
			console.log('added credentials to store');
		} else {
			console.error("invalid credentials");
		}
	} else {
		console.error("error: no such server type registered '" + server_type + "'");
	}
};

StarGazer.prototype.command_remove_credentials = function (server_name) {
	if (this.remove_credentials(server_name)) {
		this.store_config();
		console.log("removed credentials from store");
	}
};

StarGazer.prototype.command_encrypt_config = function() {
	if (!this.is_config_encrypted) {
		this.get_user_config_password(this.encrypt_config_file.bind(this));
	} else {
		console.error("error: config is already encrypted");
	}
};

StarGazer.prototype.command_decrypt_config = function() {
	if (this.is_config_encrypted) {
		this.decrypt_config_file();
	} else {
		console.error("error: config is not encrypted");
	}
};



StarGazer.prototype.encrypt_text = function (plaintext) {
	var cipher = crypto.createCipher(this.config_encryption_algorithm, this.config_password);
	var ciphertext = cipher.update(plaintext, 'utf8', 'base64');
	ciphertext += cipher.final('base64');
	return ciphertext;
}

StarGazer.prototype.decrypt_text = function (ciphertext) {
	var decipher = crypto.createDecipher(this.config_encryption_algorithm, this.config_password);
	var plaintext = decipher.update(ciphertext, 'base64', 'utf8');
	plaintext += decipher.final('utf8');
	return plaintext;
}

StarGazer.prototype.get_user_config_password = function(callback) {
	var self = this;
	read({ prompt: 'password: ', silent: true }, function(er, password) {
		self.config_password = password;
		callback();
	});
};

StarGazer.prototype.encrypt_config_file = function() {
	this.is_config_encrypted = true;
	this.store_config();
	fs.unlinkSync(this.config_file);
};

StarGazer.prototype.decrypt_config_file = function() {
	this.is_config_encrypted = false;
	this.store_config();
	fs.unlinkSync(this.encrypted_config_file);
};

StarGazer.prototype.load_config = function(callback) {
	// load the config file
	if (fs.existsSync(this.config_file)) {
		this.is_config_encrypted = false;
		var config_data = yaml.safeLoad(fs.readFileSync(this.config_file, 'utf8'));
		callback(this.instantiate_config(config_data));
	} else if (fs.existsSync(this.encrypted_config_file)) {
		this.is_config_encrypted = true;
		var self = this;
		this.get_user_config_password(function () {
			var data = fs.readFileSync(self.encrypted_config_file, 'ascii');
			data = self.decrypt_text(data, self.config_password);
			var config_data = yaml.safeLoad(data);
			callback(self.instantiate_config(config_data));
		});
	} else {
		console.log("warning: no config file found at '" + this.config_file + "'");
		var config_data = { 'credentials-manager': 'star-gazer', credentials: {} };
		callback(this.instantiate_config(config_data));
	}
};

StarGazer.prototype.instantiate_config = function(config_data) {
	if (config_data['credentials-manager'] === 'star-gazer') {
		// instantiate all credentials classes
		this.config = { 'credentials-manager': config_data['credentials-manager'], credentials: {} };
		for (var server_name in config_data.credentials) {
			var data = config_data.credentials[server_name];
			this.config.credentials[server_name] = this.server_types[data.server_type].from_store(server_name, data);
		}

		return true;
	} else {
		console.error("error: malformed config (missing credentials-manager field)");
		console.error("\t(maybe you misspelled your password?)");

		return false;
	}
};

StarGazer.prototype.store_config = function() {

	// serialize all the credentials back into a js object
	var config_data = { 'credentials-manager': this.config['credentials-manager'], credentials: {} };
	for (var server_name in this.config.credentials) {
		config_data.credentials[server_name] = this.config.credentials[server_name].to_store();
	}

	// write the config file
	if (this.is_config_encrypted) {
		var data = yaml.safeDump(config_data);
		data = this.encrypt_text(data);
		fs.writeFileSync(this.encrypted_config_file, data, { 'encoding': 'ascii' });
	} else {
		fs.writeFileSync(this.config_file, yaml.safeDump(config_data), { 'encoding': 'utf8' });
	}
};




StarGazer.prototype.get_credentials = function (server_name) {
	return this.config.credentials[server_name];
};

StarGazer.prototype.open_connection = function (server_name) {
	var credentials = this.get_credentials(server_name);
	if (credentials !== undefined) {
		console.log('connecting to ' + server_name + '...');
		credentials.open_connection();
	} else {
		console.error("error: no credentials found for '" + server_name + "', use the list command to view your existing credentials");
	}
}

StarGazer.prototype.add_credentials = function (server_name, credentials) {
	if (this.get_credentials(server_name) !== undefined) {
		console.error("error: a set of credentials already exists under the name '" + server_name + "', use a different server name");
		return false;
	}

	this.config.credentials[server_name] = credentials;
	return true;
}

StarGazer.prototype.remove_credentials = function (server_name) {
	if (this.get_credentials(server_name) === undefined) {
		console.error("error: no credentials found for '" + server_name + "', use the list command to view your existing credentials");
		return false;
	}

	delete this.config.credentials[server_name];
	return true;
}


if (require.main === module) {
	var gazer = new StarGazer();
	gazer.load_plugins();

	if (process.argv.length < 3) {
		console.log('usage:');
		gazer.list_commands();
	} else {
		gazer.load_config(function (success) {
			if (success) {
				gazer.run_command(process.argv[2], process.argv.slice(3));
			}
		});
	}


} else {
	module.exports = StarGazer;
}



